// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherForecast.Infrastructure.DataAccess;

#nullable disable

namespace WeatherForecast.Infrastructure.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20240523191608_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Weathers.HourlyWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<double>("TemperatureC")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WeatherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeatherId");

                    b.ToTable("HourlyWeathers");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Weathers.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageTemperature")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Weathers.HourlyWeather", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.Weathers.Weather", "Weather")
                        .WithMany("HourlyWeathers")
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Weathers.Weather", b =>
                {
                    b.Navigation("HourlyWeathers");
                });
#pragma warning restore 612, 618
        }
    }
}
